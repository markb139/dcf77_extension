<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="t[UqT;HVV+ayfSEe1/:6" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="f*[DKJ(WB@uZSK?cibtS" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace dcf77 {" line1="    const mult: number[] = [1, 2, 4, 8, 10, 20, 40, 80]" line2="" line3="    function decodeNumber (bits: number[], offset: number, count: number) {" line4="        let ret = 0" line5="        for (let i = 0; i &lt;= count; i++) {" line6="            ret = ret + mult[i] * bits[i + offset]" line7="        }" line8="        return ret" line9="    }" line10="" line11="    /**" line12="     * Decode the minute value" line13="     * @param bits received" line14="     */" line15="    //% block" line16="    export function decodeMinute (bits: number[]) {" line17="        return decodeNumber(bits, 21, 6)" line18="    }" line19="" line20="    /**" line21="     * Decode the hour value" line22="     * @param bits received" line23="     */" line24="    //% block" line25="    export function decodeHour (bits: number[]) {" line26="       return decodeNumber(bits, 29, 5)" line27="    }" line28="" line29="    /**" line30="     * Decode the day value" line31="     * @param bits received" line32="     */" line33="    //% block" line34="    export function decodeDay (bits: number[]) {" line35="        return decodeNumber(bits, 36, 5)" line36="    }" line37="" line38="    /**" line39="     * Decode the month value" line40="     * @param bits received" line41="     */" line42="    //% block" line43="    export function decodeMonth (bits: number[]) {" line44="        return decodeNumber(bits, 45, 4)" line45="    }" line46="" line47="    /**" line48="     * Decode the year value" line49="     * @param bits received" line50="     */" line51="    //% block" line52="    export function decodeYear (bits: number[]) {" line53="        return decodeNumber(bits, 50, 7)" line54="    }" line55="    /**" line56="     * Convert number to 0 padded string" line57="     * @param n number to convert" line58="     */" line59="    //% block" line60="    export function convert(n: number): string {" line61="        if(n &lt; 10) {" line62="            return &quot;0&quot; + convertToText(n)" line63="        }" line64="        else {" line65="            return convertToText(n)" line66="        }" line67="    }" line68="}" numlines="69"></mutation></block></statement></block></xml>